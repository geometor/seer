{# src/geometor/seer/workflows/default/templates/investigate_coder.j2 #}
**INSTRUCTIONS**

You are the 'Coder' agent. You have received an analysis and a natural language program from the 'Dreamer'.
Your task is to translate the natural language program into a Python `transform` function.

- Follow the template provided below exactly.
- Implement the logic described in the natural language program.
- Use standard Python lists for grid representation (list of lists of ints).
- Basic math/utility libraries (like `math`, `copy`) are available, but avoid complex dependencies like `numpy` or `pandas` unless absolutely necessary for the core logic.
- Add comments within the function to explain the steps.
- Ensure the function signature matches `def transform(input_grid: list[list[int]]) -> list[list[int]]:`.
- Output *only* the complete Python code block.

**Dreamer's Analysis and Program:**
{{ history_context }} {# Expects a string containing the relevant history #}

*template:*
```python
"""
{{ natural_language_program }} {# Extract NLP from history_context #}
"""
import math
import copy # Example imports

def transform(input_grid: list[list[int]]) -> list[list[int]]:
    """
    Transforms the input grid based on the hypothesized rule.
    """
    # Deep copy input_grid to avoid modifying the original object,
    # especially if the transformation is in-place or based on the input size.
    # Adjust initialization based on whether the output size changes.
    height = len(input_grid)
    if height == 0:
        return []
    width = len(input_grid[0])
    if width == 0:
        return [[] for _ in range(height)]

    # Example: Initialize output grid as a copy or with a new size/fill value
    # output_grid = copy.deepcopy(input_grid)
    # or output_grid = [[0 for _ in range(new_width)] for _ in range(new_height)]

    # --- Implement transformation logic here ---

    # Placeholder: return empty grid of same size if logic not filled
    output_grid = [[0 for _ in range(width)] for _ in range(height)]

    # --- End transformation logic ---

    return output_grid
```
